@page "/course"
@inject ICourseService CourseService
@using BlazeUTS.Models
@using BlazeUTS.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Courses</h3>
<div class="d-flex align-items-center">
    <input class="form-control me-2" type="search" aria-label="Search" @bind="searchTerm" placeholder="Search Course..." style="width: 200px;" />
    <button class="btn btn-outline-dark" @onclick="AddCourse"><i class="bi bi-plus-square"></i> Add Course</button>
</div>

<table class="table mt-3">
    <thead>
        <tr>
            <th>No</th>
            <th>Name</th>
            <th>Image</th>
            <th>Duration</th>
            <th>Description</th>
            <th>Category Id</th>
            <th>Category</th>
            <th>Description</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            var rowNumber = 1; // Variabel untuk nomor urut
        }
        @foreach (var course in filteredCourses) // Mengiterasi daftar kursus yang sudah difilter
        {
            <tr>
                <td>@rowNumber</td>
                <td>@course.Name</td>
                <td><img src="/Uploads/@course.ImageName" alt="@course.ImageName" width="50" /></td>
                <td>@course.Duration</td>
                <td>@course.Description</td>
                <td>@course.Category?.CategoryId</td>
                <td>@course.Category?.Name</td>
                <td>@course.Category?.Description</td>
                <td>
                    <button class="btn btn-outline-primary" @onclick="() => EditCourse(course.Id)"><i class="bi bi-pencil-square"></i> Edit</button>
                    <button class="btn btn-outline-danger" @onclick="() => DeleteCourse(course.Id)"><i class="bi bi-trash-fill"></i> Delete</button>
                </td>
            </tr>
            rowNumber++; // Menambah nomor urut
        }
    </tbody>
</table>

@code {
    private List<Course> course = new List<Course>(); // Daftar untuk menyimpan kursus
    private List<Course> filteredCourses => course // Properti untuk memfilter kursus berdasarkan pencarian
        .Where(c => string.IsNullOrWhiteSpace(searchTerm) || c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) // Memfilter jika `searchTerm` kosong atau sesuai dengan nama kursus
        .ToList();
    private string searchTerm = ""; // Variabel untuk menyimpan nilai pencarian

    protected override async Task OnInitializedAsync() // Metode yang dipanggil saat komponen diinisialisasi
    {
        course = (await CourseService.GetCourses()).ToList(); // Mengambil daftar kursus dari layanan
    }

    private void AddCourse() // Metode untuk menavigasi ke halaman tambah kursus
    {
        NavigationManager.NavigateTo("/add-course");
    }

    private void EditCourse(int id) // Metode untuk menavigasi ke halaman edit kursus
    {
        NavigationManager.NavigateTo($"/edit-course/{id}");
    }

    private async Task DeleteCourse(int id) // Metode untuk menghapus kursus
    {
        var confirmed = await ConfirmDelete(); // Menampilkan konfirmasi sebelum menghapus
        if (confirmed) // Jika pengguna mengonfirmasi
        {
            await CourseService.DeleteCourse(id); // Menghapus kursus dari layanan
            course = (await CourseService.GetCourses()).ToList(); // Mengambil kembali daftar kursus untuk memperbarui tampilan
            StateHasChanged(); // Memperbarui tampilan komponen
        }
    }

    private async Task<bool> ConfirmDelete() // Metode untuk menampilkan konfirmasi penghapusan
    {
        return await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?"); // Menampilkan dialog konfirmasi
    }
}
